import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import sqlite3
from sqlite3 import Error



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "members.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)

# ========== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ==========
def create_connection():
    """–°–æ–∑–¥–∞—ë—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = None
    try:
        conn = sqlite3.connect(DB_FILE)
        return conn
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
    return conn


def init_db():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    conn = create_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS members (
                    chat_id INTEGER,
                    nickname TEXT,
                    UNIQUE(chat_id, nickname)
                )
            """)
            conn.commit()
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        finally:
            conn.close()


def add_member(chat_id: int, nickname: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = create_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO members VALUES (?, ?)", (chat_id, nickname))
            conn.commit()
            return cursor.rowcount > 0
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
            return False
        finally:
            conn.close()
    return False


def get_members(chat_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    conn = create_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT nickname FROM members WHERE chat_id = ?", (chat_id,))
            return [row[0] for row in cursor.fetchall()]
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return []
        finally:
            conn.close()
    return []


# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add [–ò–º—è –§–∞–º–∏–ª–∏—è] - –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "/members - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )
    await update.message.reply_text(help_text)


async def add_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: /add –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"""
    chat_id = update.message.chat_id
    args = context.args

    if not args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è: /add –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
        return

    nickname = " ".join(args)

    if add_member(chat_id, nickname):
        await update.message.reply_text(f"‚úÖ {nickname} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è {nickname} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!")


async def show_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: /members"""
    chat_id = update.message.chat_id
    members = get_members(chat_id)

    if not members:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
    else:
        members_list = "\n".join(f"üë§ {nick}" for nick in members)
        await update.message.reply_text(f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(members)}):\n{members_list}")


# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = Application.builder().token("7762254781:AAEtTStYgmDmJ676XLgxxEGG0vL0xxHHV0E").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_nick))
    app.add_handler(CommandHandler("members", show_members))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()


if __name__ == "__main__":
    main()
